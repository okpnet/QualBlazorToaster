@using BlazorToaster.Model
@inherits OwningComponentBase
@typeparam TArgment 

<section >
    @foreach (var toast in Collection.ToList())
    {
        <Toast ToastTemplate="ToastTemplate" Model="@toast"></Toast>
    }
</section>
@code {

    IDisposable? _observer;

    [Parameter]
    public int DefaultCloseTiem { get; set; }

    [Parameter]
    public IToastModelCollsection<TArgment> Collection { get; set; } = new ToastCollecion<TArgment>();

    [Parameter, EditorRequired]
    public RenderFragment<TArgment> ToastTemplate { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();

    }

    protected override Task OnParametersSetAsync()
    {
        if(Collection is not null)
        {
            if(_observer is not null)
            {
                _observer.Dispose();
            }
            _observer= Collection.CollectionAddObservable.Subscribe(async _ => await InvokeAsync(StateHasChanged));
        }
        return base.OnParametersSetAsync();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (_observer is not null)
        {
            _observer.Dispose();
        }
    }
}
