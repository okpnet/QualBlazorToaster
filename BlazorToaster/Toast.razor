@using BlazorToaster.Core
@using BlazorToaster.Observe

@inherits OwningComponentBase
@typeparam TArgment
<output class="toast @activeClass">
    @ToastTemplate((IToastArg<TArgment>)Model)
</output>

@code {
    IDisposable _changeObservable=default!;

    [Parameter,EditorRequired]
    public IToastModel<TArgment> Model { get; set; } = default!;

    [Parameter, EditorRequired]
    public RenderFragment<IToastArg<TArgment>> ToastTemplate { get; set; } = default!;

    string activeClass
    {
        get
        {
            if(Model is null)
            {
                return "";
            }
            return Model.State switch
            {
                ToastState.Stop=>"",
                ToastState.Running=>"toast-is-active",
                ToastState.Complete=>"",
                _=>""
            };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(Model is null)
        {
            return;
        }
        _changeObservable = Model.ChangeObservable.Subscribe(async _ => await InvokeAsync(StateHasChanged));
        await Model.StartAsync();
        await Task.Delay(10);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (Model.State==ToastState.Stop)
        {
            await Model.StartAsync();
            await Task.Delay(10);
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _changeObservable.Dispose();
    }
}
